%% Example usage of Maxwell

%% Basic usage
% The most fundamental use of Maxwell:

    [E, H] = maxwell(grid, epsilon, J); % ...and there was light!


%% Basic data structures
% In the example above, all the input and output variables are one of the 
% following kinds of Matlab structure types.

    % E, H, epsilon, and J are all Matlab structures of the following type:
    my_array = zeros([100 100 100]);
    E = struct('x', my_array, 'y', my_array, 'z', my_array); % Used E as an example.

    % grid is a structure containing the following:
    grid = struct(  'omega', omega, ...
                    's_prim', s_prim, ...
                    's_dual', s_dual, ...
                    'origin_prim', [-50 -50 -50], ...
                    'origin_dual', [-49.5 -49.5 -49.5]);


%% Simple simulation example (point source in free-space)
% The choice of such data structures is (hopefully) elucidated by the 
% following simple example of the full process of running a simulation.

    % Make the grid.
    % 200x200x80 grid with angular frequency of 0.08.
    % Forcing the user to set the frequency at the same time as setting
    % the grid will allow the s-factors to be resolved immediately (simple!).
    % Also, we create the epsilon and J structures (epsilon=1 and J=0 everywhere)
    % to make things just that much easier for the user...
    [grid, epsilon, J] = maxwell_init(0.08, ...
                                    -100:100, 'pml', ...
                                    -100:100, 'pml', ...
                                    -40:40, 'pml');

    % Central point source excitation.
    J.y(100,100,40) = 1; 

    % Simulate.
    [E, H] = maxwell(grid, epsilon, J); 

    % Start interactive visualization.
    maxwell_totalview(grid, epsilon, E, H);


%% More involved example (excitation of fundamental waveguide mode)
% Here is a more relevant example.

function example2()

    % Make the grid.
    [grid, epsilon, J] = ...
        maxwell_grid(0.08, -100:100, 'pml', -100:100, 'pml', -40:40, 'pml');

    % Define the simulation's dielectric structure.
    function eps = my_waveguide(epsilon, pos)
        % This inline function provides the description of the dielectric
        % distribution in the simulation space is a completely general way.
        wg_size = [Inf, 20, 10];
        wg_center = [0, 0, 0];
        ind = find((pos.y > wg_center(2) - wg_size(2)/2) & ...
                    (pos.y < wg_center(2) + wg_size(2)/2) & ...
                    (pos.z > wg_center(3) - wg_size(3)/2) & ...
                    (pos.z < wg_center(3) + wg_size(3)/2));
        eps(ind) = 12.25;
    end

    % Now we get the actual numerical values of epsilon from the description.
    % Note that instead of @my_waveguide, pre-supplied shapes can also be used.
    epsilon = maxwell_epsilon(grid, epsilon, @my_waveguide); % Add waveguide.

    % Get the input excitation.
    % Note here that putting the frequency inside of grid makes things
    % simpler once again.
    % Also, we are overwriting the default value of J generated by mawell_grid.
    J_pos = {[-80 -20 -20], [-80 20 20]} % The excitation slice.
    J = maxwell_wgmode(grid, epsilon, 'x+', J_pos, 1);

    % Simulate.
    [E, H] = maxwell(grid, epsilon, J);

    % Calculate output flux.
    F_pos = {[80 -20 -20], [80 20 20]} % Measure at this slice.
    F = maxwell_wgmode(grid, epsilon 'x+', F_pos, 1);
    flux = maxwell_flux(grid, epsilon, E, H, F_pos);

    % Interactive visualization.
    maxwell_totalview(grid, epsilon, E, H);
end
